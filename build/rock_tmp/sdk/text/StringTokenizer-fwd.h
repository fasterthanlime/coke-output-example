/* text/StringTokenizer header-forward file, generated with rock, the ooc compiler written in ooc */

#ifndef ___text_StringTokenizer_fwd___
#define ___text_StringTokenizer_fwd___

struct _text_StringTokenizer__StringTokenizer;
typedef struct _text_StringTokenizer__StringTokenizer text_StringTokenizer__StringTokenizer;
struct _text_StringTokenizer__StringTokenizerIterator;
typedef struct _text_StringTokenizer__StringTokenizerIterator text_StringTokenizer__StringTokenizerIterator;
struct _text_StringTokenizer__StringTokenizerClass;
typedef struct _text_StringTokenizer__StringTokenizerClass text_StringTokenizer__StringTokenizerClass;
struct _text_StringTokenizer__StringTokenizerIteratorClass;
typedef struct _text_StringTokenizer__StringTokenizerIteratorClass text_StringTokenizer__StringTokenizerIteratorClass;

#include <sdk/lang/Exception-fwd.h>
#include <sdk/lang/BufferIterator-fwd.h>
#include <sdk/lang/System-fwd.h>
#include <sdk/lang/Character-fwd.h>
#include <sdk/lang/VarArgs-fwd.h>
#include <sdk/lang/types-fwd.h>
#include <sdk/lang/Iterators-fwd.h>
#include <sdk/lang/Memory-fwd.h>
#include <sdk/lang/String-fwd.h>
#include <sdk/lang/Buffer-fwd.h>
#include <sdk/lang/Numbers-fwd.h>
#include <sdk/lang/Abstractions-fwd.h>
#include <sdk/lang/Format-fwd.h>
#include <sdk/lang/IO-fwd.h>
#include <sdk/structs/ArrayList-fwd.h>
text_StringTokenizer__StringTokenizerClass *text_StringTokenizer__StringTokenizer_class();
text_StringTokenizer__StringTokenizer* text_StringTokenizer__StringTokenizer_new_withCharWithoutmaxTokens(lang_String__String* input, lang_Character__Char delim);
void text_StringTokenizer__StringTokenizer_init_withCharWithoutmaxTokens(text_StringTokenizer__StringTokenizer* this, lang_String__String* input, lang_Character__Char delim);
text_StringTokenizer__StringTokenizer* text_StringTokenizer__StringTokenizer_new_withStringWithoutmaxTokens(lang_String__String* input, lang_String__String* delim);
void text_StringTokenizer__StringTokenizer_init_withStringWithoutmaxTokens(text_StringTokenizer__StringTokenizer* this, lang_String__String* input, lang_String__String* delim);
text_StringTokenizer__StringTokenizer* text_StringTokenizer__StringTokenizer_new_withChar(lang_String__String* input, lang_Character__Char delim, lang_Numbers__SSizeT maxTokens);
void text_StringTokenizer__StringTokenizer_init_withChar(text_StringTokenizer__StringTokenizer* this, lang_String__String* input, lang_Character__Char delim, lang_Numbers__SSizeT maxTokens);
text_StringTokenizer__StringTokenizer* text_StringTokenizer__StringTokenizer_new_withString(lang_String__String* input, lang_String__String* delim, lang_Numbers__SSizeT maxTokens);
void text_StringTokenizer__StringTokenizer_init_withString(text_StringTokenizer__StringTokenizer* this, lang_String__String* input, lang_String__String* delim, lang_Numbers__SSizeT maxTokens);
lang_Iterators__Iterator* text_StringTokenizer__StringTokenizer_iterator(text_StringTokenizer__StringTokenizer* this);
lang_Iterators__Iterator* text_StringTokenizer__StringTokenizer_iterator_impl(text_StringTokenizer__StringTokenizer* this);
lang_types__Bool text_StringTokenizer__StringTokenizer_hasNext__quest(text_StringTokenizer__StringTokenizer* this);
lang_types__Bool text_StringTokenizer__StringTokenizer_hasNext__quest_impl(text_StringTokenizer__StringTokenizer* this);
lang_String__String* text_StringTokenizer__StringTokenizer_nextToken(text_StringTokenizer__StringTokenizer* this);
lang_String__String* text_StringTokenizer__StringTokenizer_nextToken_impl(text_StringTokenizer__StringTokenizer* this);
void text_StringTokenizer__StringTokenizer___defaults__(text_StringTokenizer__StringTokenizer* this);
void text_StringTokenizer__StringTokenizer___defaults___impl(text_StringTokenizer__StringTokenizer* this);
void text_StringTokenizer__StringTokenizer___load__();
text_StringTokenizer__StringTokenizerIteratorClass *text_StringTokenizer__StringTokenizerIterator_class();
text_StringTokenizer__StringTokenizerIterator* text_StringTokenizer__StringTokenizerIterator_new_sti(lang_types__Class* T, text_StringTokenizer__StringTokenizer* st);
void text_StringTokenizer__StringTokenizerIterator_init_sti(text_StringTokenizer__StringTokenizerIterator* this, text_StringTokenizer__StringTokenizer* st);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_hasNext__quest(text_StringTokenizer__StringTokenizerIterator* this);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_hasNext__quest_impl(text_StringTokenizer__StringTokenizerIterator* this);
void text_StringTokenizer__StringTokenizerIterator_next(text_StringTokenizer__StringTokenizerIterator* this, uint8_t* __genericReturn151);
void text_StringTokenizer__StringTokenizerIterator_next_impl(text_StringTokenizer__StringTokenizerIterator* this, uint8_t* __genericReturn151);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_hasPrev__quest(text_StringTokenizer__StringTokenizerIterator* this);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_hasPrev__quest_impl(text_StringTokenizer__StringTokenizerIterator* this);
void text_StringTokenizer__StringTokenizerIterator_prev(text_StringTokenizer__StringTokenizerIterator* this, uint8_t* __genericReturn152);
void text_StringTokenizer__StringTokenizerIterator_prev_impl(text_StringTokenizer__StringTokenizerIterator* this, uint8_t* __genericReturn152);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_remove(text_StringTokenizer__StringTokenizerIterator* this);
lang_types__Bool text_StringTokenizer__StringTokenizerIterator_remove_impl(text_StringTokenizer__StringTokenizerIterator* this);
void text_StringTokenizer__StringTokenizerIterator___defaults__(text_StringTokenizer__StringTokenizerIterator* this);
void text_StringTokenizer__StringTokenizerIterator___defaults___impl(text_StringTokenizer__StringTokenizerIterator* this);
void text_StringTokenizer__StringTokenizerIterator___load__();
void text_StringTokenizer_load();
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_withChar(lang_Buffer__Buffer* this, lang_Character__Char c, lang_Numbers__SSizeT maxTokens);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_withStringWithoutmaxTokens(lang_Buffer__Buffer* this, lang_Buffer__Buffer* s);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_withCharWithoutmaxTokens(lang_Buffer__Buffer* this, lang_Character__Char c);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_withBufWithEmpties(lang_Buffer__Buffer* this, lang_Buffer__Buffer* s, lang_types__Bool empties);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_withCharWithEmpties(lang_Buffer__Buffer* this, lang_Character__Char c, lang_types__Bool empties);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_buf(lang_Buffer__Buffer* this, lang_Buffer__Buffer* delimiter, lang_Numbers__SSizeT maxTokens);
structs_ArrayList__ArrayList* lang_Buffer__Buffer_split_pointer(lang_Buffer__Buffer* this, lang_Character__Char* delimiter, lang_Numbers__SizeT delimiterLength, lang_Numbers__SSizeT maxTokens);
structs_ArrayList__ArrayList* lang_String__String_split_withChar(lang_String__String* this, lang_Character__Char c, lang_Numbers__SSizeT maxTokens);
structs_ArrayList__ArrayList* lang_String__String_split_withStringWithoutmaxTokens(lang_String__String* this, lang_String__String* s);
structs_ArrayList__ArrayList* lang_String__String_split_withCharWithoutmaxTokens(lang_String__String* this, lang_Character__Char c);
structs_ArrayList__ArrayList* lang_String__String_split_withStringWithEmpties(lang_String__String* this, lang_String__String* s, lang_types__Bool empties);
structs_ArrayList__ArrayList* lang_String__String_split_withCharWithEmpties(lang_String__String* this, lang_Character__Char c, lang_types__Bool empties);
structs_ArrayList__ArrayList* lang_String__String_split_str(lang_String__String* this, lang_String__String* delimiter, lang_Numbers__SSizeT maxTokens);

#endif // ___text_StringTokenizer_fwd___
